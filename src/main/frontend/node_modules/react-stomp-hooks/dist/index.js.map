{"version":3,"file":"index.js","sources":["../src/context/StompContext.tsx","../src/components/StompSessionProvider.tsx","../src/hooks/useSubscription.tsx","../src/hooks/useStompClient.tsx","../src/hoc/withStompClient.tsx","../src/hoc/withSubscription.tsx","../src/mock/subscriptions.tsx","../src/mock/client.tsx","../src/mock/StompSessionProviderMock.tsx","../src/mock/reset.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\n\nconst StompContext = createContext<StompSessionProviderContext | undefined>(\n  undefined\n);\n\nexport default StompContext;\n","import React, { useEffect, useRef, useState } from 'react';\nimport StompContext from '../context/StompContext';\nimport SockJS from 'sockjs-client';\nimport {\n  Client,\n  IStompSocket,\n  messageCallbackType,\n  StompHeaders\n} from '@stomp/stompjs';\nimport { StompSessionProviderProps } from '../interfaces/StompSessionProviderProps';\nimport { StompSessionSubscription } from '../interfaces/StompSessionSubscription';\n\n/**\n * The StompSessionProvider manages the STOMP connection\n * All Hooks and HOCs in this library require an ancestor of this type.\n * The URL to connect to can be specified via the url prop.\n * Depending on the Schema of the URL either Sockjs or a raw Websocket is used.\n * You can override this behavior with the brokerURL or webSocketFactory props, which will then be forwarded to @stomp/stompjs\n * Custom @stomp/stompjs options can be used as props.\n * Please consult the @stomp/stompjs documentation for more information.\n */\nfunction StompSessionProvider(props: StompSessionProviderProps) {\n  let { url, children, stompClientOptions, ...stompOptions } = props;\n\n  // Support old API\n  if (stompClientOptions) stompOptions = stompClientOptions;\n\n  const [client, setClient] = useState<Client | undefined>(undefined);\n  const subscriptionRequests = useRef(new Map());\n\n  useEffect(() => {\n    const _client = new Client(stompOptions);\n\n    if (!stompOptions.brokerURL && !stompOptions.webSocketFactory) {\n      _client.webSocketFactory = function () {\n        const parsedUrl = new URL(url, window?.location?.href);\n        if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {\n          return new SockJS(url) as IStompSocket;\n        } else if (\n          parsedUrl.protocol === 'ws:' ||\n          parsedUrl.protocol === 'wss:'\n        ) {\n          return new WebSocket(url) as IStompSocket;\n        } else throw new Error('Protocol not supported');\n      };\n    }\n\n    _client.onConnect = function (frame) {\n      if (stompOptions.onConnect) stompOptions.onConnect(frame);\n\n      subscriptionRequests.current.forEach((value) => {\n        value.subscription = _client.subscribe(\n          value.destination,\n          value.callback,\n          value.headers\n        );\n      });\n\n      setClient(_client);\n    };\n\n    _client.onWebSocketClose = function (event) {\n      if (stompOptions.onWebSocketClose) stompOptions.onWebSocketClose(event);\n\n      setClient(undefined);\n    };\n\n    if (!stompOptions.onStompError) {\n      _client.onStompError = function (frame) {\n        throw frame;\n      };\n    }\n\n    _client.activate();\n\n    return () => {\n      _client.deactivate();\n    };\n  }, [url, ...Object.values(stompOptions)]);\n\n  const subscribe = (\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ) => {\n    const subscriptionId = Math.random().toString(36).substr(2, 9);\n    const subscriptionRequest: StompSessionSubscription = {\n      destination,\n      callback,\n      headers\n    };\n\n    subscriptionRequests.current.set(subscriptionId, subscriptionRequest);\n\n    if (client && client.connected) {\n      subscriptionRequest.subscription = client.subscribe(\n        destination,\n        callback,\n        headers\n      );\n    }\n\n    return () => {\n      const subscriptionData = subscriptionRequests.current.get(subscriptionId);\n\n      if (subscriptionData.subscription) {\n        subscriptionData.subscription.unsubscribe();\n      }\n\n      subscriptionRequests.current.delete(subscriptionId);\n    };\n  };\n\n  return (\n    <StompContext.Provider\n      value={{\n        client,\n        subscribe\n      }}\n    >\n      {children}\n    </StompContext.Provider>\n  );\n}\n\nexport default StompSessionProvider;\n","import { useContext, useEffect, useRef } from 'react';\nimport StompContext from '../context/StompContext';\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\n\n/**\n *\n * @param destinations The destinations to subscribe to. Can be a string for a single destination or an array of strings for multiple.\n * @param onMessage Callback called when a message arrives for this subscription\n * @param headers Additional Headers for this subscription, consult @stomp/stompjs docs.\n */\nfunction useSubscription(\n  destinations: string | string[],\n  onMessage: messageCallbackType,\n  headers: StompHeaders = {}\n) {\n  const stompContext = useContext(StompContext);\n\n  if (stompContext === undefined)\n    throw new Error(\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\n    );\n\n  const callbackRef = useRef<messageCallbackType>(onMessage);\n  const _destinations = Array.isArray(destinations)\n    ? destinations\n    : [destinations];\n\n  callbackRef.current = onMessage;\n\n  useEffect(() => {\n    const cleanUpFunctions: (() => void)[] = [];\n\n    _destinations.forEach((_destination) =>\n      cleanUpFunctions.push(\n        stompContext.subscribe(\n          _destination,\n          (message) => {\n            callbackRef.current(message);\n          },\n          headers\n        )\n      )\n    );\n\n    return () => {\n      cleanUpFunctions.forEach((_cleanUpFunction) => {\n        _cleanUpFunction();\n      });\n    };\n  }, [\n    Object.values(_destinations).toString(),\n    Object.values(headers).toString()\n  ]);\n}\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StompContext from '../context/StompContext';\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\n\n/**\n * Returns the Stomp Client from @stomp/stompjs\n * This will be undefined if the client is currently not connected\n */\nfunction useStompClient() {\n  const context = useContext<StompSessionProviderContext | undefined>(\n    StompContext\n  );\n\n  if (context === undefined)\n    throw new Error(\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\n    );\n\n  return context.client;\n}\n\nexport default useStompClient;\n","import React from 'react';\nimport useStompClient from '../hooks/useStompClient';\n\nfunction withStompClient<P>(WrappedComponent: React.ComponentType<P>) {\n  return (props: P) => {\n    const stompClient = useStompClient();\n    return <WrappedComponent stompClient={stompClient} {...props} />;\n  };\n}\n\nexport default withStompClient;\n","import React, { useRef } from 'react';\nimport useSubscription from '../hooks/useSubscription';\nimport { StompHeaders } from '@stomp/stompjs';\nimport {\n  MessageReceiverInterface,\n  StompMessageReceiver\n} from '../interfaces/StompMessageReceiver';\nimport { IMessage } from '@stomp/stompjs/esm6/i-message';\n\nfunction withSubscription<P>(\n  WrappedComponent: StompMessageReceiver<P>,\n  destinations: string | string[],\n  headers: StompHeaders = {}\n) {\n  return (props: P) => {\n    const ref = useRef<MessageReceiverInterface>();\n    useSubscription(\n      destinations,\n      (message: IMessage) => {\n        if (ref.current) ref.current.onMessage(message);\n      },\n      headers\n    );\n\n    // @ts-ignore\n    return <WrappedComponent ref={ref} {...props} />;\n  };\n}\n\nexport default withSubscription;\n","import { IMessage } from '@stomp/stompjs/src/i-message';\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\n\nexport const subscriptions = new Map<string, Map<string, Function>>();\n\nexport function subscribeMock(\n  destination: string,\n  callback: messageCallbackType,\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  headers: StompHeaders = {}\n) {\n  const subscriptionId = Math.random().toString(36).substr(2, 9);\n\n  if (!subscriptions.has(destination)) {\n    subscriptions.set(destination, new Map<string, Function>());\n  }\n\n  // @ts-ignore\n  subscriptions.get(destination).set(subscriptionId, callback);\n\n  return () => {\n    // @ts-ignore\n    subscriptions.get(destination).delete(subscriptionId);\n  };\n}\n\n/**\n * Simulates receiving a message from the server to the specified destination\n * @param destination The topic to send the message to\n * @param message The message to send\n */\nexport function mockReceiveMessage(\n  destination: string,\n  message: IMessage\n): void {\n  if (subscriptions.has(destination)) {\n    // @ts-ignore\n    subscriptions.get(destination).forEach((callback: Function) => {\n      callback(message);\n    });\n  }\n}\n\n/**\n * Gets the current subscriptions for the specified destination\n * @param destination The topic to get the subscriptions for, or undefined to get all subscriptions\n */\nexport function getMockSubscriptions(destination?: string) {\n  if (destination) {\n    return subscriptions.get(destination);\n  }\n  return subscriptions;\n}\n","import { IPublishParams } from '@stomp/stompjs';\n\nexport const messages = new Map<string, Array<IPublishParams>>();\n\n/**\n * A mock implementation of the publish function of the @stomp/stompjs client.\n * Will store the messages in a map, keyed by the destination.\n * @param params\n */\nexport function mockClientPublish(params: IPublishParams) {\n  if (!messages.has(params.destination)) {\n    messages.set(params.destination, []);\n  }\n\n  // @ts-ignore\n  messages.get(params.destination).push(params);\n}\n\n/**\n * Gets a default Mock of the @stomp/stompjs client.\n * If you require a custom client, you can use this as a base.\n */\nexport function getMockClient() {\n  return {\n    publish: mockClientPublish\n  };\n}\n\n/**\n * Gets all messages which have been sent via a mock client.\n * @param destination The destination to get messages for, or undefined to get all messages.\n */\nexport function getSentMockMessages(destination?: string) {\n  if (destination) {\n    return messages.get(destination);\n  }\n  return messages;\n}\n","import React from 'react';\nimport StompContext from '../context/StompContext';\nimport { subscribeMock } from './subscriptions';\nimport { getMockClient } from './client';\n\n/**\n * A mock StompSessionProvider.\n * Messages send via this mock implementation can be received via the getSentMockMessages method.\n * Subscriptions can be received via the getMockSubscriptions method.\n * The sendMockMessage method can be used, to simulate receiving a message from the server.\n *\n * @param props.client Optional. Can be used to provide a custom mock of the sompjs client,\n * in case you require additional properties/functions to be present. getMockClient can be used as a base.\n * @constructor\n */\nexport default function StompSessionProviderMock(props: {\n  children: React.ReactNode;\n  client?: any;\n}) {\n  return (\n    <StompContext.Provider\n      value={{\n        subscribe: subscribeMock,\n        // @ts-ignore\n        client: props.client ?? getMockClient()\n      }}\n    >\n      {props.children}\n    </StompContext.Provider>\n  );\n}\n","import { subscriptions } from './subscriptions';\nimport { messages } from './client';\n\n/**\n * Resets the state of the mock implementation, clearing all subscriptions and messages.\n */\nexport function reset() {\n  subscriptions.clear();\n  messages.clear();\n}\n"],"names":["StompContext","createContext","undefined","StompSessionProvider","props","url","children","stompClientOptions","stompOptions","useState","client","setClient","subscriptionRequests","useRef","Map","useEffect","_client","Client","brokerURL","webSocketFactory","parsedUrl","URL","window","location","href","protocol","SockJS","WebSocket","Error","onConnect","frame","current","forEach","value","subscription","subscribe","destination","callback","headers","onWebSocketClose","event","onStompError","activate","deactivate","Object","values","subscriptionId","Math","random","toString","substr","subscriptionRequest","set","connected","subscriptionData","get","unsubscribe","React","createElement","Provider","useSubscription","destinations","onMessage","stompContext","useContext","callbackRef","_destinations","Array","isArray","cleanUpFunctions","_destination","push","message","_cleanUpFunction","useStompClient","context","withStompClient","WrappedComponent","stompClient","assign","withSubscription","ref","subscriptions","subscribeMock","has","mockReceiveMessage","getMockSubscriptions","messages","mockClientPublish","params","getMockClient","publish","getSentMockMessages","StompSessionProviderMock","reset","clear"],"mappings":"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"}