{"ast":null,"code":"import _classCallCheck from \"C:/Users/18126/IdeaProjects/demo/src/main/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/18126/IdeaProjects/demo/src/main/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Versions } from '../versions';\nimport { CompatClient } from './compat-client';\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\n\nexport var Stomp = /*#__PURE__*/function () {\n  function Stomp() {\n    _classCallCheck(this, Stomp);\n  }\n\n  _createClass(Stomp, null, [{\n    key: \"client\",\n    value:\n    /**\n     * This method creates a WebSocket client that is connected to\n     * the STOMP server located at the url.\n     *\n     * ```javascript\n     *        var url = \"ws://localhost:61614/stomp\";\n     *        var client = Stomp.client(url);\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#brokerURL]{@link Client#brokerURL}.\n     */\n    function client(url, protocols) {\n      // This is a hack to allow another implementation than the standard\n      // HTML5 WebSocket class.\n      //\n      // It is possible to use another class by calling\n      //\n      //     Stomp.WebSocketClass = MozWebSocket\n      //\n      // *prior* to call `Stomp.client()`.\n      //\n      // This hack is deprecated and `Stomp.over()` method should be used\n      // instead.\n      // See remarks on the function Stomp.over\n      if (protocols == null) {\n        protocols = Versions.default.protocolVersions();\n      }\n\n      var wsFn = function wsFn() {\n        var klass = Stomp.WebSocketClass || WebSocket;\n        return new klass(url, protocols);\n      };\n\n      return new CompatClient(wsFn);\n    }\n    /**\n     * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n     * specify the WebSocket to use (either a standard HTML5 WebSocket or\n     * a similar object).\n     *\n     * In order to support reconnection, the function Client._connect should be callable more than once.\n     * While reconnecting\n     * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n     * alternatively allows passing a function that should return a new instance of the underlying socket.\n     *\n     * ```javascript\n     *        var client = Stomp.over(function(){\n     *          return new WebSocket('ws://localhost:15674/ws')\n     *        });\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n\n  }, {\n    key: \"over\",\n    value: function over(ws) {\n      var wsFn;\n\n      if (typeof ws === 'function') {\n        wsFn = ws;\n      } else {\n        console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' + 'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n\n        wsFn = function wsFn() {\n          return ws;\n        };\n      }\n\n      return new CompatClient(wsFn);\n    }\n  }]);\n\n  return Stomp;\n}();\n/**\n * In case you need to use a non standard class for WebSocket.\n *\n * For example when using within NodeJS environment:\n *\n * ```javascript\n *        StompJs = require('../../esm5/');\n *        Stomp = StompJs.Stomp;\n *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n * ```\n *\n * **Deprecated**\n *\n *\n * It will be removed in next major version. Please switch to {@link Client}\n * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n */\n// tslint:disable-next-line:variable-name\n\nStomp.WebSocketClass = null;","map":{"version":3,"mappings":";;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAWA;;;;;;;;;;AASA,WAAaC,KAAb;EAAA;IAAA;EAAA;;EAAA;IAAA;IAAA;IAqBE;;;;;;;;;;;;;;IAcO,gBAAcC,GAAd,EAA2BC,SAA3B,EAA+C;MACpD;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA,IAAIA,SAAS,IAAI,IAAjB,EAAuB;QACrBA,SAAS,GAAGJ,QAAQ,CAACK,OAAT,CAAiBC,gBAAjB,EAAZ;MACD;;MACD,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAK;QAChB,IAAMC,KAAK,GAAGN,KAAK,CAACO,cAAN,IAAwBC,SAAtC;QACA,OAAO,IAAIF,KAAJ,CAAUL,GAAV,EAAeC,SAAf,CAAP;MACD,CAHD;;MAKA,OAAO,IAAIH,YAAJ,CAAiBM,IAAjB,CAAP;IACD;IAED;;;;;;;;;;;;;;;;;;;;;;EA5DF;IAAA;IAAA,OAiFS,cAAYI,EAAZ,EAAmB;MACxB,IAAIJ,IAAJ;;MAEA,IAAI,OAAOI,EAAP,KAAc,UAAlB,EAA8B;QAC5BJ,IAAI,GAAGI,EAAP;MACD,CAFD,MAEO;QACLC,OAAO,CAACC,IAAR,CACE,yEACE,+EAFJ;;QAIAN,IAAI,GAAG;UAAA,OAAMI,EAAN;QAAA,CAAP;MACD;;MAED,OAAO,IAAIV,YAAJ,CAAiBM,IAAjB,CAAP;IACD;EA/FH;;EAAA;AAAA;AACE;;;;;;;;;;;;;;;;;AAiBA;;AACcL,uBAAsB,IAAtB","names":["Versions","CompatClient","Stomp","url","protocols","default","protocolVersions","wsFn","klass","WebSocketClass","WebSocket","ws","console","warn"],"sources":["C:\\Users\\18126\\IdeaProjects\\demo\\src\\main\\frontend\\node_modules\\@stomp\\stompjs\\src\\compatibility\\stomp.ts"],"sourcesContent":["import { Versions } from '../versions';\nimport { CompatClient } from './compat-client';\nimport { IStompSocket } from '../types';\n\n/**\n * @internal\n */\ndeclare const WebSocket: {\n  prototype: IStompSocket;\n  new (url: string, protocols?: string | string[]): IStompSocket;\n};\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) {\n      protocols = Versions.default.protocolVersions();\n    }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof ws === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn(\n        'Stomp.over did not receive a factory, auto reconnect will not work. ' +\n          'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over'\n      );\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}